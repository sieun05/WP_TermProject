#pragma comment(lib, "Msimg32.lib")
#include "헤더.h"


//20250906

using namespace std;

#define marginX 16
#define marginY 39


HINSTANCE g_hInst;
LPCTSTR lpszClass = L"Window Class Name";
LPCTSTR lpszWindowName = L"2025 Window Programming Exam";

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam);

int monster_cnt{};
int dead_cnt{};

////(25.06.08) - 오시은
//알파블렌딩을 위한 변수
HBITMAP g_LightMask = NULL;
void* g_LightBits = NULL;
int g_LightWidth = 0;
int g_LightHeight = 0;

//2506103 도전과제 변수
int challenge[7]{};

//(25.06.09) - 김정현
// 인벤토리 비트맵 관련 변수(설명 비트맵 추가)
HBITMAP itemDescBmp = nullptr;
HDC itemDescDC = nullptr;
int mouseX = -1;
int mouseY = -1;

HBITMAP InvenExpanded = nullptr;
HBITMAP InvenNormal = nullptr;
HBITMAP InvenExpandednum = nullptr;
HBITMAP InvenNormalnum = nullptr;
HBITMAP SelecInven_Ex = nullptr;
HBITMAP SelecInven_Nor = nullptr;

HDC hdcExpanded = nullptr;
HDC hdcNormal = nullptr;
HDC hdcExpandednum = nullptr;
HDC hdcNormalnum = nullptr;
HDC hdcSelecInven_Ex = nullptr;
HDC hdcSelecInven_Nor = nullptr;

int bmpExp_W = 0;
int bmpExp_H = 0;

int bmpNor_W = 0;
int bmpNor_H = 0;

int bmpselec_W = 0;
int bmpselec_H = 0;

static int InvenSelec_Nor = 1;
static int InvenSelec_Ex_x = 1;
static int InvenSelec_Ex_y = 1;

//(25.05.31) - 김정현
//25.06.10 - 김정현
Inventory inventory[3][10]; //인벤토리 30칸
Inventory playeritem[4]; //장비칸 4칸
Inventory production[6]; //제작칸 6칸
Inventory productitem[11]; //제작대 제작칸 11칸
Inventory cookitem[3]; //요리칸 3칸(재료 위에서부터 2개 + 결과물1칸)

//(25.06.03) - 김정현
//드래그 관련 변수
static bool drag = false; //드래그 변수 추가
static Inventory drag_item;
static int dragX = -1;
static int dragY = -1;
static int dragMouseX = 0;
static int dragMouseY = 0;

//(25.06.05) - 김정현
// 몬스터 관련 변수
static Monster monster1[20]; //몬스터 종류, 수에 따라서 변경 가능
static Monster monster2[20];

static int monster1_cnt = 0;
static int monster2_cnt = 0;

static int Mon_dir1[20] = { 0 };
static int Mon_steps1[20] = { 0 };

static int Mon_dir2[20] = { 0 };
static int Mon_steps2[20] = { 0 };

//(25.06.08) - 김정현
//열쇠, 고기 확률 드랍
//몬스터 죽었을 때 처리
//(25.06.09) - 김정현
//벽 위에 템이 떨어지지 않도록 하기
bool FindNearbyEmptyTile(int x, int y, int& outX, int& outY) {
	const int dirs[9][2] = {{0, 0}, {1, 0}, {-1, 0}, {0, 1}, {0, -1},{1, 1}, {-1, -1}, {1, -1}, {-1, 1}};
	for (int i = 0; i < 9; ++i) {
		int tx = x + dirs[i][0] * CELL_SIZE;
		int ty = y + dirs[i][1] * CELL_SIZE;

		int col = tx / CELL_SIZE;
		int row = ty / CELL_SIZE;

		if (col < 0 || col >= MAP_WIDTH || row < 0 || row >= MAP_HEIGHT)
			continue;
		int type = game_map[row][col].type;
		if ( type == 0|| type == 5 || type == 6) {
			outX = col * CELL_SIZE + CELL_SIZE / 2;
			outY = row * CELL_SIZE + CELL_SIZE / 2;
			return true;
		}
	}
	return false;
}
void RemoveMonster1() {
	for (int i = 0; i < monster1_cnt;) {
		if (monster1[i].hp <= 0) {
			if (not challenge[3]) challenge[3] = 1;
			int dropX, dropY;
			uniform_int_distribution<int> dist(1, 10);
			int roll = dist(dre);
			if (FindNearbyEmptyTile(monster1[i].x, monster1[i].y, dropX, dropY)) {
				if (roll == 1) {
					worldItems.push_back({ dropX, dropY,14,1 });
				}
				if (roll >= 4) {
					worldItems.push_back({ dropX, dropY,71,1 });
				}
			}
			monster1[i] = monster1[monster1_cnt - 1];
			Mon_dir1[i] = Mon_dir1[monster1_cnt - 1];
			Mon_steps1[i] = Mon_steps1[monster1_cnt - 1];

			--monster1_cnt;
			monster_cnt++;
		}
		else
			++i;
	}
}
void RemoveMonster2() {
	for (int i = 0; i < monster2_cnt;) {
		if (monster2[i].hp <= 0) {
			if (not challenge[3]) challenge[3] = 1;
			int dropX, dropY;
			uniform_int_distribution<int> dist(1, 10);
			int roll = dist(dre);
			if (FindNearbyEmptyTile(monster2[i].x, monster2[i].y, dropX, dropY)) {
				if (roll == 1) {
					worldItems.push_back({ dropX, dropY,14,1 });
				}
				if (roll >= 4) {
					worldItems.push_back({ dropX, dropY,71,1 });
				}
			}
			monster2[i] = monster2[monster2_cnt - 1];
			Mon_dir2[i] = Mon_dir2[monster2_cnt - 1];
			Mon_steps2[i] = Mon_steps2[monster2_cnt - 1];

			--monster2_cnt;
			monster_cnt++;
		}
		else
			++i;
	}
}

//(25.06.07) - 김정현
//플레이어 비트맵 관련 변수
HBITMAP PlayerBmp = nullptr;
HDC PlayerDC = nullptr;
int PlayerBmpWidth = 0;
int PlayerBmpHeight = 0;

//(25.06.08) - 김정현
//무기 공격 관련 변수 (추가)
vector<Arrow> arrow;
HBITMAP arrowBmp = nullptr;
HDC ArrowDC = nullptr;

vector<Magic> magics;
HBITMAP fireBmp = nullptr;
HDC FireDC = nullptr;
HBITMAP waterEffectBmp = nullptr;
HDC waterEffectDC = nullptr;

bool useWaterEffect = false;

HBITMAP DaggerAttackBmp = nullptr;
HDC DaggerAttackDC = nullptr;
HBITMAP LongswordAttackBmp = nullptr;
HDC LongswordAttackDC = nullptr;
const int ATK_SPR_WD = 64;
const int ATK_SPR_HD = 64;
const int ATK_SPR_WL = 75;
const int ATK_SPR_HL = 75;
const int ATK_COLS = 2;
const int ATK_ROWS = 8;
constexpr int DIR_TO_ATK_ROW[8] = { 0,5,2,7,3,6,1,4 };

//(25.06.08) - 김정현
//장비
static bool dragFromEquip = false;

//(25.06.08) - 김정현
//아이템 드랍 관련 변수
vector<WorldItem> worldItems;

bool AddItemToInventory(int itemID, int count) {
	for (int row = 0; row < 3; ++row) {
		for (int col = 0; col < 10; ++col) {
			if (inventory[row][col].itemID == itemID && inventory[row][col].itemcnt < 10) {
				inventory[row][col].itemcnt += count;
				return true;
			}
		}
	}
	for (int row = 0; row < 3; ++row) {
		for (int col = 0; col < 10; ++col) {
			if (inventory[row][col].itemID == 0) {
				inventory[row][col].itemID = itemID;
				inventory[row][col].itemcnt = count;
				return true;
			}
		}
	}
	return false;
}

static RECT firstSlot;
static RECT secondSlot;
static RECT thirdSlot;
//25.06.10 - 김정현
//요리 아이템 함수
void DrawCookItems(HDC mdc, HDC itemDC, HDC memdc) {
	// 첫 번째 칸 그리기
	if (cookitem[0].itemID != 0) {
		int sx, sy;
		GetItemTileCoords(cookitem[0].itemID, sx, sy);
		int sxNum, syNum;
		GetNumberTileCoords(cookitem[0].itemcnt, sxNum, syNum);

		int drawX = firstSlot.left;
		int drawY = firstSlot.top;
		TransparentBlt(mdc, drawX, drawY, ITEM_SIZE, ITEM_SIZE, itemDC, sx, sy, ITEM_SIZE, ITEM_SIZE, RGB(0, 0, 255));
		TransparentBlt(mdc, drawX, drawY, ITEM_SIZE, ITEM_SIZE, memdc, sxNum, syNum, ITEM_SIZE, ITEM_SIZE, RGB(0, 0, 255));
	}

	// 두 번째 칸 그리기
	if (cookitem[1].itemID != 0) {
		int sx, sy;
		GetItemTileCoords(cookitem[1].itemID, sx, sy);
		int sxNum, syNum;
		GetNumberTileCoords(cookitem[1].itemcnt, sxNum, syNum);

		int drawX = secondSlot.left;
		int drawY = secondSlot.top;
		TransparentBlt(mdc, drawX, drawY, ITEM_SIZE, ITEM_SIZE, itemDC, sx, sy, ITEM_SIZE, ITEM_SIZE, RGB(0, 0, 255));
		TransparentBlt(mdc, drawX, drawY, ITEM_SIZE, ITEM_SIZE, memdc, sxNum, syNum, ITEM_SIZE, ITEM_SIZE, RGB(0, 0, 255));
	}

	// 세 번째 칸 그리기 (결과물 칸)
	if (cookitem[2].itemID != 0) {
		int sx, sy;
		GetItemTileCoords(cookitem[2].itemID, sx, sy);
		int drawX = thirdSlot.left;
		int drawY = thirdSlot.top;
		TransparentBlt(mdc, drawX, drawY, ITEM_SIZE, ITEM_SIZE, itemDC, sx, sy, ITEM_SIZE, ITEM_SIZE, RGB(0, 0, 255));
	}
}

//(25.06.10) - 김정현
//보스 변수
Effect attackEffect = { false, 0, 0, 0 };
bool game_end_flag = false;

//map, bx, by 전역 변수로 바꿈 
Cell game_map[MAP_WIDTH][MAP_HEIGHT]{
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 7, 7, 1, 1, 7, 7, 1, 1, 1, 1, 7, 7, 7, 7, 1, 1, 1, 1, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 7, 7, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 1, 1, 1, 1, 1, 7, 7, 7, 7, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 1, 1, 1, 1, 1, 1, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7,
7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7,
7, 7, 7, 7, 1, 1, 3, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7,
7, 7, 7, 1, 1, 1, 3, 3, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7,
7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7,
7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7,
7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 7, 7, 7, 7, 7,
7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 6, 6, 6, 6, 6, 6, 6, 1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 7, 7, 7,
7, 7, 7, 7, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 3, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7,
7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 6, 6, 6, 6, 6, 6, 6, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7,
7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7,
7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 7, 7, 7, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 6, 6, 6, 6, 6, 7, 7, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 0, 0, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 7, 7, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7,
7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 8, 8, 8, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7,
7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7,
7, 7, 7, 7, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7,
7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 7, 7, 6, 6, 6, 6, 6, 6, 1, 6, 6, 6, 6, 0, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 6, 6, 6, 6, 0, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 7, 7, 6, 6, 6, 1, 1, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 1, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 0, 0, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 8, 8, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7,
7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 3, 3, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 5, 5, 5, 5, 8, 8, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7,
7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 0, 0, 6, 6, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7,
7, 7, 7, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 8, 6, 6, 6, 6, 6, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 5, 8, 8, 8, 5, 5, 1, 1, 1, 1, 7, 7, 1, 1, 1, 1, 5, 5, 5, 5, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 8, 8, 6, 6, 6, 6, 6, 6, 0, 6, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 7, 7, 1, 1, 1, 5, 5, 5, 5, 5, 1, 1, 1, 1, 2, 2, 2, 1, 1, 7, 7, 7, 7, 7,
7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 2, 2, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7,
7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 8, 6, 6, 1, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7,
7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 7, 7, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7,
7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 7, 7, 7, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 7, 7, 0, 0, 0, 1, 1, 0, 0, 0, 0, 8, 8, 8, 8, 8, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 3, 3, 5, 5, 5, 5, 5, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7,
7, 7, 7, 7, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 8, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 1, 1, 2, 2, 1, 1, 1, 3, 1, 5, 5, 5, 5, 8, 5, 5, 5, 5, 5, 5, 8, 8, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 8, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 1, 1, 1, 2, 1, 1, 1, 1, 3, 3, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 7, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 7, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 1, 1, 1, 2, 0, 0, 0, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7,
7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7,
7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7,
7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 8, 5, 5, 5, 5, 8, 6, 8, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 8, 5, 5, 5, 5, 5, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 0, 7, 0, 0, 7, 7, 0, 0, 0, 7, 7, 7, 7, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 6, 5, 5, 5, 5, 5, 5, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 7, 7, 7, 7, 1, 3, 3, 1, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 1, 3, 3, 7, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 3, 3, 3, 1, 1, 1, 1, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 1, 1, 1, 7, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 8, 7, 7, 1, 3, 1, 1, 1, 1, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 8, 7, 7, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 1, 1, 5, 5, 5, 5, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 0, 7, 0, 0, 0, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7,
7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 7, 7, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 0, 0, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7,
7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 7, 7, 5, 5, 7, 7, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 7, 7, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7,
7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7,
7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7,
7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7,
7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 1, 1, 1, 1, 1, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 1, 1, 1, 1, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 7, 7, 7, 7, 1, 1, 1, 7, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 7, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
};

int bx{}, by{};

int  WINAPI WinMain(_In_ HINSTANCE hInstance, _In_opt_ HINSTANCE hPrevInstance, _In_  LPSTR lpszCmdParam, _In_  int nCmdShow)
{
	HWND hWnd;
	MSG Message;
	WNDCLASSEX WndClass;
	g_hInst = hInstance;

	WndClass.cbSize = sizeof(WndClass);
	WndClass.style = CS_HREDRAW | CS_VREDRAW;
	WndClass.lpfnWndProc = (WNDPROC)WndProc;
	WndClass.cbClsExtra = 0;
	WndClass.cbWndExtra = 0;
	WndClass.hInstance = hInstance;
	WndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	WndClass.hCursor = LoadCursor(NULL, IDI_APPLICATION);
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
	WndClass.lpszMenuName = NULL;
	WndClass.lpszClassName = lpszClass;
	WndClass.hIconSm = LoadIcon(NULL, IDI_APPLICATION);
	RegisterClassEx(&WndClass);

	//--- 크기 변경 가능 (기존 (1024, 768))
	hWnd = CreateWindow(
		lpszClass, 
		lpszWindowName, 
		WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_MINIMIZEBOX,
		0, 0,
		1280, 
		720, 
		NULL, 
		(HMENU)NULL, 
		hInstance, 
		NULL);
	ShowWindow(hWnd, nCmdShow);
	UpdateWindow(hWnd);

	while (GetMessage(&Message, 0, 0, 0)) {
		TranslateMessage(&Message);
		DispatchMessage(&Message);
	}
	return Message.wParam;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	HDC hdc, mdc, memdc, memdc2;
	HDC maskDC, tempDC;
	HGDIOBJ oldMask;
	PAINTSTRUCT ps;
	HBITMAP hbitmap;
	static RECT clientRect;
	TCHAR txt[100];

	//정현변수 여기 정의
	HDC  hdcUse;
	HDC  hdcNum;
	HDC  hdcselec;
	HDC  hdcScreen;
	HDC  hdcMemItem;
	HDC hdcMemNumber;
	HDC itemDC;
	HDC hdcCraftUI; //제작대 hdc 추가
	HDC hdcCookUI; //요리대 hdc 추가


	HBRUSH hbrush{}, oldbrush{};
	HPEN hpen{}, oldpen{};

	static int width;
	static int height;
	static double rect_width;
	static double rect_height;
	static int centerx, centery;

	static Player p{ 1280 / 2, 720 / 2, 8 ,100,100,100 };
	static int hungercnt = 0;

	static int water_sel{};
	static int water_delay{};

	static HBITMAP wall;
	static HBITMAP ground[3];
	static HBITMAP water;
	
	static HBITMAP hp_bar;
	static HBITMAP mp_bar;
	static HBITMAP stmn_bar;
	
	//장신구, 속도, 보스 관련 변수
	static int regenCnt = 0; //장신구 효과 카운트
	static int hungerMp_cnt = 0; 
	static bool hunger_walk = false; //배고픔 느리게 걷기


	static int bossAnimFrame = 0; //보스 애니메이션
	static DWORD lastAnimUpdate = 0; //보스 공격 쿨타임
	static Boss boss; //보스

	//(25.06.10) - 김정현
	//제작칸 드래그 변수
	static bool dragInCrafting = false;
	static int dragCraftingX = -1, dragCraftingY = -1;
	static Inventory dragCraftingItem;

	//(25.06.08) - 오시은
	//인벤캐릭터 변수, 체력회복 변수
	static int iven_character_anim{};
	static int iven_character_delay{};

	static int hp_recover_delay{};

	//(25.06.10) - 오시은
	//음식 먹기 딜레이
	static int eat_dealy{};

	//2506102 제작창, 요리창
	static bool show_craft{};
	static bool show_cook{};
	static HBITMAP craftUI;
	static HBITMAP cookUI;

	//2506103
	static bool show_pclick;
	static HBITMAP pclick[3];
	static bool reset_flag[2]{};

	static HBITMAP player_died;

	static bool boss_flag{};
	static int boss_delay{};
	static bool reblend{};
	
	//2506104
	static Cell game_map_init[MAP_WIDTH][MAP_HEIGHT];

	//2506105
	static int screen{}; //0 메인화면, 1 게임화면
	static HBITMAP mainscreen;
	static HBITMAP endscreen;

	static int min{}, sec{};
	


	BLENDFUNCTION blend;

	switch (iMessage) {
	case WM_CREATE:
		//2506104
		std::memcpy(game_map_init, game_map, sizeof(game_map));

		SetTimer(hWnd, 1, 20, NULL);
		SetTimer(hWnd, 2, 1000, NULL);

		wall = (HBITMAP)LoadImage(NULL, L"비트맵\\타일\\벽.bmp", IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE | LR_CREATEDIBSECTION);
		ground[0] = (HBITMAP)LoadImage(NULL, L"비트맵\\타일\\땅3.bmp", IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE | LR_CREATEDIBSECTION);
		ground[1] = (HBITMAP)LoadImage(NULL, L"비트맵\\타일\\풀땅.bmp", IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE | LR_CREATEDIBSECTION);
		ground[2] = (HBITMAP)LoadImage(NULL, L"비트맵\\타일\\주황풀땅3.bmp", IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE | LR_CREATEDIBSECTION); water = (HBITMAP)LoadImage(NULL, L"비트맵\\타일\\물.bmp", IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE | LR_CREATEDIBSECTION);

		hp_bar = (HBITMAP)LoadImage(NULL, L"비트맵\\플레이어\\체력.bmp", IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE | LR_CREATEDIBSECTION);
		mp_bar = (HBITMAP)LoadImage(NULL, L"비트맵\\플레이어\\마나.bmp", IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE | LR_CREATEDIBSECTION);
		stmn_bar = (HBITMAP)LoadImage(NULL, L"비트맵\\플레이어\\스테미너.bmp", IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE | LR_CREATEDIBSECTION);

		//2506103 인벤폴더에 해당 비트맵들 추가해야함
		craftUI = (HBITMAP)LoadImage(NULL, L"비트맵\\인벤\\제작.bmp", IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE | LR_CREATEDIBSECTION);
		cookUI = (HBITMAP)LoadImage(NULL, L"비트맵\\인벤\\요리창.bmp", IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE | LR_CREATEDIBSECTION);
		pclick[0] = (HBITMAP)LoadImage(NULL, L"비트맵\\인벤\\도전과제.bmp", IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE | LR_CREATEDIBSECTION);
		pclick[1] = (HBITMAP)LoadImage(NULL, L"비트맵\\인벤\\체크.bmp", IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE | LR_CREATEDIBSECTION);
		pclick[2] = (HBITMAP)LoadImage(NULL, L"비트맵\\인벤\\단축키.bmp", IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE | LR_CREATEDIBSECTION);

		//2506103
		player_died = (HBITMAP)LoadImage(NULL, L"비트맵\\플레이어\\죽음.bmp", IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE | LR_CREATEDIBSECTION);
		mainscreen = (HBITMAP)LoadImage(NULL, L"비트맵\\시작화면.bmp", IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE | LR_CREATEDIBSECTION);
		endscreen = (HBITMAP)LoadImage(NULL, L"비트맵\\인벤\\엔딩화면.bmp", IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE | LR_CREATEDIBSECTION);

		GetClientRect(hWnd, &clientRect);
		width = clientRect.right - clientRect.left;
		height = clientRect.bottom - clientRect.top;
		rect_width = width / CELL_SIZE;
		rect_height = height / CELL_SIZE;
		centerx = (clientRect.left + clientRect.right) / 2;
		centery = (clientRect.top + clientRect.bottom) / 2;

		//(25.06.08) - 오시은
		//카메라 시작위치 변경
		bx = MAP_PIXEL_WIDTH / 2 - width / 2;
		by = MAP_PIXEL_HEIGHT / 2 - height / 2;

		// 화면 밖으로 벗어나지 않게 보정
		if (bx < 0) bx = 0;
		if (by < 0) by = 0;
		if (bx > MAP_PIXEL_WIDTH - width) bx = MAP_PIXEL_WIDTH - width;
		if (by > MAP_PIXEL_HEIGHT - height) by = MAP_PIXEL_HEIGHT - height;

		//알파블렌딩
		tempDC = GetDC(hWnd);
		g_LightMask = CreateLightingMask(tempDC, clientRect.right * 2, clientRect.bottom * 2, 400);
		ReleaseDC(hWnd, tempDC);

		//(25.06.08) - 김정현
		//화살, 공격모션, 불 비트맵
		arrowBmp = (HBITMAP)LoadImage(NULL, L"비트맵\\아이템\\화살.bmp", IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE | LR_CREATEDIBSECTION);
		ArrowDC = CreateCompatibleDC(NULL);
		SelectObject(ArrowDC, arrowBmp);
		DaggerAttackBmp = (HBITMAP)LoadImage(NULL,L"비트맵\\플레이어\\공격모션.bmp",IMAGE_BITMAP, 0, 0,LR_LOADFROMFILE | LR_CREATEDIBSECTION);
		DaggerAttackDC = CreateCompatibleDC(NULL);
		SelectObject(DaggerAttackDC, DaggerAttackBmp);
		LongswordAttackBmp = (HBITMAP)LoadImage(NULL,L"비트맵\\플레이어\\장검 공격모션.bmp",IMAGE_BITMAP, 0, 0,LR_LOADFROMFILE | LR_CREATEDIBSECTION);
		LongswordAttackDC = CreateCompatibleDC(NULL);
		SelectObject(LongswordAttackDC, LongswordAttackBmp);
		fireBmp = (HBITMAP)LoadImage(NULL,L"비트맵\\플레이어\\불.bmp",IMAGE_BITMAP, 0, 0,LR_LOADFROMFILE | LR_CREATEDIBSECTION);
		FireDC = CreateCompatibleDC(NULL);
		SelectObject(FireDC, fireBmp);
		waterEffectBmp = (HBITMAP)LoadImage(NULL,L"비트맵\\플레이어\\물.bmp",IMAGE_BITMAP, 0, 0,LR_LOADFROMFILE | LR_CREATEDIBSECTION);
		waterEffectDC = CreateCompatibleDC(NULL);
		SelectObject(waterEffectDC, waterEffectBmp);

		//(25.06.02) - 김정현
		//인벤 비트맵 로드
		if (!InitInvBitmaps(nullptr)) {
			MessageBox(hWnd, L"인벤토리 비트맵 로드 실패", L"Error", MB_OK | MB_ICONERROR);
		}
		if (!InitItemBitmaps()) {
			MessageBox(hWnd, L"아이템 비트맵 로드 실패", L"Error", MB_OK | MB_ICONERROR);
		}

		//(25.06.09) - 김정현
		// 인벤 아이템 설명창 함수
		InitItemDescription();

		//(25.06.07) - 김정현
		//플레이어 비트맵 불러오기
		InitPlayerSprite(g_hInst);

		//(25.06.08) - 김정현
		//플레이어 초기화 추가
		p.dir = DIR_DOWN;
		p.baseMp = 100;
		p.maxMp = 100;
		p.baseHp = 100;
		p.maxHp = 100;
		p.hp = 100;
		p.mp = 100;
		p.maxMp = p.baseMp;
		p.mp = p.maxMp;
		p.hunger = 100;

		//(25.06.09) - 김정현
		//보스 관련 초기화
		boss.state = BOSS_IDLE;
		boss.animFrame = 0;
		boss.maxFrame = 4;
		boss.lastAnimUpdate = GetTickCount64();
		boss.hp = 1000;
		boss.prepareStartTime = 0;
		boss.x = MAP_PIXEL_WIDTH / 2 - 35;
		boss.y = MAP_PIXEL_WIDTH / 2 - 190;
		InitBossSprite();

		//(25.06.10) - 김정현
		//기본 제작칸 초기화

		production[0].itemID = 11;
		production[1].itemID = 12;
		production[2].itemID = 91;
		production[3].itemID = 63;
		production[4].itemID = 64;
		production[5].itemID = 92;
		for (int i = 0; i < 6; i++){
			production[i].itemcnt = 1;
		}

		//제작대 제작칸 초기화
		productitem[0].itemID = 21;
		productitem[1].itemID = 31;
		productitem[2].itemID = 41;
		productitem[3].itemID = 1;
		productitem[4].itemID = 2;
		productitem[5].itemID = 4;
		productitem[6].itemID = 22;
		productitem[7].itemID = 32;
		productitem[8].itemID = 42;
		productitem[9].itemID = 3;
		productitem[10].itemID = 13;

		//25.06.10 - 김정현
		//요리칸 좌표 저장
		firstSlot = { centerx - 760 / 2 + 294, 302 - 90, centerx - 760 / 2 + 294 + 58, 302 + 58 };
		secondSlot = { centerx - 760 / 2 + 294, 302 + 63 - 90, centerx - 760 / 2 + 294 + 58, 302 + 63 + 58 };
		thirdSlot = { centerx - 760 / 2 + 294 + 58 + 60, 302 + 33 - 90, centerx - 760 / 2 + 294 + 58 + 60 + 58, 302 + 33 + 58 };
		break;
	case WM_TIMER:
		switch (wParam) {
		case 1:
		{
			//2506105
			if (challenge[6] and screen==1) {
				game_end_flag = true;
			}

			//2506103 
			if (boss_flag and not reblend) {
				reblend = true;

				//알파블렌딩
				tempDC = GetDC(hWnd);
				g_LightMask = CreateLightingMask(tempDC, clientRect.right * 2, clientRect.bottom * 2, 400);
				ReleaseDC(hWnd, tempDC);
			}

			//2506103
			if (reset_flag[0]) {
				reset_flag[0] = false;

				//알파블렌딩
				tempDC = GetDC(hWnd);
				g_LightMask = CreateLightingMask(tempDC, clientRect.right * 2, clientRect.bottom * 2, 400);
				ReleaseDC(hWnd, tempDC);

				p.died_flag = false;
				p.hp = p.maxHp;
				p.mp = p.maxMp;
				p.hunger = 100;

				bx = MAP_PIXEL_WIDTH / 2 - width / 2;
				by = MAP_PIXEL_HEIGHT / 2 - height / 2;

				for (int i{}; i < 10; i++) {
					int ran = drop_ran(dre);

					if (ran == 1) {
						inventory[0][i].itemcnt = 0;
						inventory[0][i].itemID = 0;
					}
				}

				boss_flag = false;
				boss_delay = 0;
				boss.animFrame = 0;
				boss.maxFrame = 4;
				boss.lastAnimUpdate = GetTickCount64();
				boss.hp = 1000;
				boss.prepareStartTime = 0;;
				reblend = false;
				dead_cnt++;
			}

			//2506104
			if (reset_flag[1]) {
				reset_flag[1] = false;

				//2506105
				for (int i{}; i < 7; i++) {
					challenge[i] = 0;
				}

				std::memcpy(game_map, game_map_init, sizeof(game_map_init));

				//(25.06.08) - 오시은
				//카메라 시작위치 변경
				bx = MAP_PIXEL_WIDTH / 2 - width / 2;
				by = MAP_PIXEL_HEIGHT / 2 - height / 2;

				// 화면 밖으로 벗어나지 않게 보정
				if (bx < 0) bx = 0;
				if (by < 0) by = 0;
				if (bx > MAP_PIXEL_WIDTH - width) bx = MAP_PIXEL_WIDTH - width;
				if (by > MAP_PIXEL_HEIGHT - height) by = MAP_PIXEL_HEIGHT - height;

				//알파블렌딩
				tempDC = GetDC(hWnd);
				g_LightMask = CreateLightingMask(tempDC, clientRect.right * 2, clientRect.bottom * 2, 400);
				ReleaseDC(hWnd, tempDC);

				for (int j = 0; j < 3; j++) {
					for (int i = 0; i < 10; ++i) {
						inventory[j][i].itemID = 0;
						inventory[j][i].itemcnt = 0;
					}
				}

				for (int i{}; i < 4; i++) {
					playeritem[i].itemID = 0;
					playeritem[i].itemcnt = 0;
				}

				//(25.06.05) - 김정현
				//기본 등장 몬스터 초기화

				monster1_cnt = 10;
				for (int i = 0; i < monster1_cnt; ++i) {
					InitMonster(&monster1[i], Monster_1);
					if (!SpawnMonster1(&monster1[i])) {
						monster1_cnt = i;
						break;
					}
					Mon_dir1[i] = ran(dre);
					Mon_steps1[i] = 0;
				}

				monster2_cnt = 10;
				for (int i = 0; i < monster2_cnt; ++i) {
					InitMonster(&monster2[i], Monster_2);
					if (!SpawnMonster2(&monster2[i])) {
						monster2_cnt = i;
						break;
					}
					Mon_dir2[i] = ran(dre);
					Mon_steps2[i] = 0;
				}

				//(25.06.08) - 김정현
				//플레이어 초기화 추가
				p.dir = DIR_DOWN;
				p.baseMp = 100;
				p.maxMp = 100;
				p.baseHp = 100;
				p.maxHp = 100;
				p.hp = 100;
				p.mp = 100;
				p.maxMp = p.baseMp;
				p.mp = p.maxMp;
				p.hunger = 100;

				//(25.06.09) - 김정현
				//보스 관련 초기화
				boss.state = BOSS_IDLE;
				boss.animFrame = 0;
				boss.maxFrame = 4;
				boss.lastAnimUpdate = GetTickCount64();
				boss.hp = 1000;
				boss.prepareStartTime = 0;
				boss.x = MAP_PIXEL_WIDTH / 2 - 35;
				boss.y = MAP_PIXEL_WIDTH / 2 - 190;

				show_inventory = false;
				show_pclick = false;
				show_craft = false;
				show_cook = false;

				//2506102 제작창, 요리창
				show_craft = false;
				show_cook = false;
				show_pclick = false;

				boss_flag = false;
				boss_delay = false;
				reblend = false;

				//inventory.id

				//2506104
				game_end_flag = false;

				inventory[0][0].itemID = 2;
				inventory[0][0].itemcnt = 1;
				inventory[0][1].itemID = 14;
				inventory[0][1].itemcnt = 1;
				inventory[0][2].itemID = 1;
				inventory[0][2].itemcnt = 1;
				inventory[0][3].itemID = 3;
				inventory[0][3].itemcnt = 1;
				inventory[0][4].itemID = 4;
				inventory[0][4].itemcnt = 1;
				inventory[0][5].itemID = 13;
				inventory[0][5].itemcnt = 10;
				inventory[0][6].itemID = 91;
				inventory[0][6].itemcnt = 1;
				inventory[0][7].itemID = 64;
				inventory[0][7].itemcnt = 10;
				inventory[0][8].itemID = 63;
				inventory[0][8].itemcnt = 10;

				screen = 1;		
			}

			if (p.hp <= 0)
				p.died_flag = true;

			//(25.06.10) - 오시은
			//음식 딜레이
			eat_dealy++;

			//(25.06.08) - 오시은
			//인벤창 캐릭터 애니메이션
			iven_character_delay++;
			if (iven_character_delay > 10)
			{
				iven_character_delay = 0;
				iven_character_anim++;
			}

			//(25.06.06) - 김정현
			//몬스터 죽음 처리
			RemoveMonster1();
			RemoveMonster2();

			//(25.06.08) - 김정현
			//플레이어 피해 시간 체크
			if (p.isHurt && GetTickCount64() - p.hurtStart > Player::HURT_DURATION) {
				p.isHurt = false;
			}

			//(25.06.07) - 오시은
			//물 비트맵 시간에 따라 변화
			water_delay++;
			if (water_delay > 10) {
				water_delay = 0;
				water_sel++;
				if (water_sel == 4)
					water_sel %= 4;
			}

			//플레이어 이동
			bool player_move_flag = false;

			if (!show_inventory && !show_cook && !show_craft and !game_end_flag) {
				//(25.06.08) (25.06.10) - 오시은
				//인벤창 열었을 때 안 움직이게 수정함

				//(25.06.09) - 김정현
				//배고픔 0이면 hp 줄어들기
				//(25.06.10) - 오시은
				//배고픔 닳는 속도 조정
				//2506103 체력, 마나회복속도 조정

				int hunger_bench = p.Lctrl_click ? 30 : 50;
				if (hungercnt >= hunger_bench) {
					hungercnt = 0;

					p.hunger--;
					if (p.hunger < 0) {
						p.hunger = 0;
					}
					if (p.hunger == 0) {
						p.hp = max(0, p.hp - 5);
					}
				}

				//(25.06.09) - 김정현
				//허기 60 이상일 때 mp 회복
				if (p.hunger > 60) {
					hungerMp_cnt++;
					if (hungerMp_cnt > 40) {
						hungerMp_cnt = 0;
						p.mp++;
						if (p.mp > 100)
							p.mp = 100;
					}
				}

				//(25.06.08) - 오시은
				//배고픔 일정량 이상일 때, 체력 회복
				if (p.hunger > 70) {
					hp_recover_delay++;
					if (hp_recover_delay > 40) {
						hp_recover_delay = 0;
						p.hp++;
						if (p.hp > 100) p.hp = 100;
					}
				}

				//(25.06.09) - 김정현
				//조용히 걷기(0.5배), 달리기(1.5배) 구현 (허기 달리기 못하는거 추가)
				if (GetAsyncKeyState(VK_LCONTROL) & 0x8000) // L-ctrl (달리기)
					p.Lctrl_click = true;
				else
					p.Lctrl_click = false;
				if (GetAsyncKeyState(VK_LSHIFT) & 0x8000) // L-shift (조용히 걷기)
					p.Lshift_click = true;
				else
					p.Lshift_click = false;

				//(25.06.09) - 허기에 따른 속도 변화
				if (p.hunger <= 30)
					hunger_walk = true;
				else
					hunger_walk = false;
				if (p.hunger <= 50)
					p.Lctrl_click = false;

				//2506103 죽었을 때 못 움직임
				if (not p.died_flag) {
					//(25.06.06) - 김정현
					//플레이어 방향 저장(공격 방향 위해)
					bool left = (GetAsyncKeyState(VK_LEFT) & 0x8000) != 0;
					bool right = (GetAsyncKeyState(VK_RIGHT) & 0x8000) != 0;
					bool up = (GetAsyncKeyState(VK_UP) & 0x8000) != 0;
					bool down = (GetAsyncKeyState(VK_DOWN) & 0x8000) != 0;

					if (left && up) {
						p.dir = DIR_UP_LEFT;
					}
					else if (left && down) {
						p.dir = DIR_DOWN_LEFT;
					}
					else if (right && up) {
						p.dir = DIR_UP_RIGHT;
					}
					else if (right && down) {
						p.dir = DIR_DOWN_RIGHT;
					}
					else if (left) {
						p.dir = DIR_LEFT;
					}
					else if (right) {
						p.dir = DIR_RIGHT;
					}
					else if (up) {
						p.dir = DIR_UP;
					}
					else if (down) {
						p.dir = DIR_DOWN;
					}

					//이동 전 좌표 저장
					int old_px = p.x;
					int old_bx = bx;

					if (GetAsyncKeyState(VK_LEFT) & 0x8000) {
						player_move_flag = true;
						if (p.Lctrl_click) {
							if (p.x > centerx - 30) {
								p.x -= p.speed * 1.5;
							}
							else if (bx <= 0) {
								p.x -= p.speed * 1.5;
							}
							else {
								bx -= p.speed * 1.5;
								if (bx < 0) bx = 0;
							}
						}
						else if (p.Lshift_click || hunger_walk) {
							if (p.x > centerx - 30) {
								p.x -= p.speed * 0.5;
							}
							else if (bx <= 0) {
								p.x -= p.speed * 0.5;
							}
							else {
								bx -= p.speed * 0.5;
								if (bx < 0) bx = 0;
							}
						}
						else {
							if (p.x > centerx - 30) {
								p.x -= p.speed;
							}
							else if (bx <= 0) {
								p.x -= p.speed;
							}
							else {
								bx -= p.speed;
								if (bx < 0) bx = 0;
							}
						}
					}
					if (GetAsyncKeyState(VK_RIGHT) & 0x8000) {
						player_move_flag = true;
						if (p.Lctrl_click) {
							if (p.x < centerx + 30) {
								p.x += p.speed * 1.5;
							}
							else if (bx >= MAP_PIXEL_WIDTH - width) {
								p.x += p.speed * 1.5;
							}
							else {
								bx += p.speed * 1.5;
								if (bx > MAP_PIXEL_WIDTH - width) bx = MAP_PIXEL_WIDTH - width;
							}
						}
						else if (p.Lshift_click || hunger_walk) {
							if (p.x < centerx + 30) {
								p.x += p.speed * 0.5;
							}
							else if (bx >= MAP_PIXEL_WIDTH - width) {
								p.x += p.speed * 0.5;
							}
							else {
								bx += p.speed * 0.5;
								if (bx > MAP_PIXEL_WIDTH - width) bx = MAP_PIXEL_WIDTH - width;
							}
						}
						else {
							if (p.x < centerx + 30) {
								p.x += p.speed;
							}
							else if (bx >= MAP_PIXEL_WIDTH - width) {
								p.x += p.speed;
							}
							else {
								bx += p.speed;
								if (bx > MAP_PIXEL_WIDTH - width) bx = MAP_PIXEL_WIDTH - width;
							}
						}
					}

					if (MoveCollisionInView(p.x, p.y)) {
						p.x = old_px;
						bx = old_bx;
					}

					int old_py = p.y;
					int old_by = by;

					if (GetAsyncKeyState(VK_UP) & 0x8000) {
						player_move_flag = true;

						if (p.Lctrl_click) {
							if (p.y > centery - 30) {
								p.y -= p.speed * 1.5;
							}
							else if (by <= 0) {
								p.y -= p.speed * 1.5;
							}
							else {
								by -= p.speed * 1.5;
								if (by < 0) by = 0;
							}
						}
						else if (p.Lshift_click || hunger_walk) {
							if (p.y > centery - 30) {
								p.y -= p.speed * 0.5;
							}
							else if (by <= 0) {
								p.y -= p.speed * 0.5;
							}
							else {
								by -= p.speed * 0.5;
								if (by < 0) by = 0;
							}
						}
						else {
							if (p.y > centery - 30) {
								p.y -= p.speed;
							}
							else if (by <= 0) {
								p.y -= p.speed;
							}
							else {
								by -= p.speed;
								if (by < 0) by = 0;
							}
						}
					}
					if (GetAsyncKeyState(VK_DOWN) & 0x8000) {
						player_move_flag = true;
						if (p.Lctrl_click) {
							if (p.y < centery + 30) {
								p.y += p.speed * 1.5;
							}
							else if (by >= MAP_PIXEL_HEIGHT - height) {
								p.y += p.speed * 1.5;
							}
							else {
								by += p.speed * 1.5;
								if (by > MAP_PIXEL_HEIGHT - height) by = MAP_PIXEL_HEIGHT - height;
							}
						}
						else if (p.Lshift_click || hunger_walk) {
							if (p.y < centery + 30) {
								p.y += p.speed * 0.5;
							}
							else if (by >= MAP_PIXEL_HEIGHT - height) {
								p.y += p.speed * 0.5;
							}
							else {
								by += p.speed * 0.5;
								if (by > MAP_PIXEL_HEIGHT - height) by = MAP_PIXEL_HEIGHT - height;
							}
						}
						else {
							if (p.y < centery + 30) {
								p.y += p.speed;
							}
							else if (by >= MAP_PIXEL_HEIGHT - height) {
								p.y += p.speed;
							}
							else {
								by += p.speed;
								if (by > MAP_PIXEL_HEIGHT - height) by = MAP_PIXEL_HEIGHT - height;
							}
						}
					}

					//충돌 시 충돌 전 좌표로 이동
					if (MoveCollisionInView(p.x, p.y)) {
						p.y = old_py;
						by = old_by;
					}

					//(25.06.07) - 김정현
					//플레이어 방향에 따른 비트맵
					if (player_move_flag) {
						hungercnt++;
						UpdatePlayerAnimation(&p);
					}
					else {
						p.anim = 0;
						p.animTimer = 0;
					}
				}

				//(25.06.08) - 오시은
				//인벤창 열었을 때 안 움직이게 수정함
				//(25.06.07) - 김정현
				//몬스터 이동 구현 (떨림버그 수정 + 이동 로직 수정)
				static int frameCnt = 0;
				bool recalc = (++frameCnt >= 20);
				if (recalc) frameCnt = 0;

				Point playerCell{
				(by + p.y) / CELL_SIZE,
				(bx + p.x) / CELL_SIZE };

				for (int i = 0; i < monster1_cnt; ++i) {
					if (recalc) {
						monster1[i].computePath(playerCell);

					}
					monster1[i].followPath();
					if (monster1[i].checkCollisionWithWalls()) {
					}
				}

				for (int i = 0; i < monster2_cnt; ++i) {
					if (recalc) {
						monster2[i].computePath(playerCell);

					}
					monster2[i].followPath();
					if (monster2[i].checkCollisionWithWalls()) {
					}
				}
			}

			//플레이어 카메라 중앙으로
			if (not (p.x == centerx and p.y == centery) and not player_move_flag) {
				if (p.x > centerx) {
					int diff = p.x - centerx;
					int move = (diff > 10) ? (diff / 5) : 1;
					if (bx + diff < MAP_PIXEL_WIDTH - width) {
						bx += move;
						p.x -= move;
					}
				}
				else if (p.x < centerx) {
					int diff = centerx - p.x;
					int move = (diff > 10) ? (diff / 5) : 1;
					if (bx - diff > 0) {
						bx -= move;
						p.x += move;
					}
				}

				if (p.y > centery) {
					int diff = p.y - centery;
					int move = (diff > 10) ? (diff / 5) : 1;
					if (by + diff < MAP_PIXEL_HEIGHT - height) {
						by += move;
						p.y -= move;
					}
				}
				else if (p.y < centery) {
					int diff = centery - p.y;
					int move = (diff > 10) ? (diff / 5) : 1;
					if (by - diff > 0) {
						by -= move;
						p.y += move;
					}
				}
			}

			static DWORD lastHitTime1[20] = { 0 };
			static DWORD lastHitTime2[20] = { 0 };

			//(25.06.08) - 김정현
			//플레이어 피해 비트맵 관련 수정

			for (int i = 0; i < monster1_cnt; ++i) {
				int mx = monster1[i].x - bx;
				int my = monster1[i].y - by;
				RECT monRect = { mx + 20 ,my + 20,mx + MONSTER_SIZE / 2 - 10,my + MONSTER_SIZE / 2 - 10 };
				RECT playerRect = { p.x, p.y, p.x + 62, p.y + 62 };
				if (monRect.left < playerRect.right && monRect.right > playerRect.left && monRect.top < playerRect.bottom && monRect.bottom > playerRect.top) {
					DWORD now = GetTickCount64();
					if (now - lastHitTime1[i] >= 500) {
						int damage = 10;
						for (int j = 0; j < 3; ++j) {
							switch (playeritem[j].itemID) {
							case 21: case 31: case 41:
								damage -= 1;
								break;
							case 22: case 32: case 42:
								damage -= 3;
								break;
							}
						}
						if (damage < 1) damage = 1;
						p.hp = max(0, p.hp - damage);
						lastHitTime1[i] = now;
						p.isHurt = true;
						p.hurtStart = GetTickCount64();
					}
				}
			}

			for (int i = 0; i < monster2_cnt; ++i) {
				int mx = monster2[i].x - bx;
				int my = monster2[i].y - by;
				RECT monRect = { mx + 20 ,my + 20,mx + MONSTER_SIZE / 2 - 10,my + MONSTER_SIZE / 2 - 10 };
				RECT playerRect = { p.x,p.y,p.x + 62,p.y + 62 };

				if (monRect.left < playerRect.right &&
					monRect.right > playerRect.left &&
					monRect.top < playerRect.bottom &&
					monRect.bottom > playerRect.top)
				{
					DWORD now = GetTickCount64();
					if (now - lastHitTime2[i] >= 500) {
						int damage = 10;
						for (int j = 0; j < 3; ++j) {
							switch (playeritem[j].itemID) {
							case 21: case 31: case 41:
								damage -= 1;
								break;
							case 22: case 32: case 42:
								damage -= 3;
								break;
							}
						}
						if (damage < 1) damage = 1;
						p.hp = max(0, p.hp - damage);
						lastHitTime2[i] = now;
						p.isHurt = true;
						p.hurtStart = GetTickCount64();
					}
				}
			}

			//2506102 이거 inventory 활성화 안햇을 때만으로 위치 변경해야함
			//(25.06.10) - 김정현
			//보스 애니메이션 구현
			//2506103
			if (boss_flag) {
				boss_delay++;

				static DWORD idleStartTime = 0;
				const DWORD idleDuration = 5000;

				if ((!show_inventory and !show_pclick and !p.died_flag and !game_end_flag) and
					GetTickCount64() - boss.prepareStartTime >= 5000
					and boss_delay > 200) {
					ChooseRandomAttack(boss);
					boss.prepareStartTime = GetTickCount64();
				}

				DWORD currentTime = GetTickCount64();
				UpdateBossAnimation(boss, currentTime);

				DWORD now = GetTickCount64();
				CheckBossAttackHit(boss, p, bx, by, now);

				//250914 보스 활,지팡이 공격
				int slot = InvenSelec_Nor - 1;
				int heldItemID = inventory[0][slot].itemID;
				CheckBossHit(boss, p, bx, by, p.dir, now, boss_flag, heldItemID);
				
			}

			//(25.06.08) - 김정현
			//날아가는 화살, 불 구현
			UpdateArrows(monster1, monster1_cnt);
			UpdateArrows(monster2, monster2_cnt);

			UpdateMagics(monster1, monster1_cnt);
			UpdateMagics(monster2, monster2_cnt);

			//(25.06.09) - 김정현
			//장신구 효과 적용(루비반지 수정)
			if (++regenCnt >= 1000 / 20) {
				regenCnt = 0;
				int accID = playeritem[3].itemID;
				if (accID == 23) {
					if (p.hp < 100)
						p.hp = min(p.hp + 5, 100);
				}
				else if (accID == 24) {
					p.mp = min(p.maxMp, p.mp + 5);
				}
			}

			const int half = PLAYER_SIZE / 2;
			RECT playerRect = { p.x - half, p.y - half, p.x + half, p.y + half };
			RECT hit;
			for (auto it = worldItems.begin(); it != worldItems.end(); ) {
				int sx = it->x - bx;
				int sy = it->y - by;
				RECT itemRect = { sx + 10, sy + 10, sx + ITEM_SIZE - 20, sy + ITEM_SIZE - 20 };

				if (IntersectRect(&hit, &playerRect, &itemRect)) {
					if (AddItemToInventory(it->itemID, it->itemcnt)) {
						it = worldItems.erase(it);
						continue;
					}
				}
				++it;
			}
			break;
		} // timer case 1
		case 2:
		{
			if (screen == 1 and not game_end_flag) {
				sec++;
				if (sec == 60) {
					sec = 0;
					min++;
				}
			}
			break;
		}
		}
		InvalidateRect(hWnd, NULL, FALSE);
		break;

		//(25.06.04) - 김정현
		//아이템 인벤 이동 드래그 구현

	case WM_LBUTTONDOWN: {
		int mouseX = LOWORD(lParam);
		int mouseY = HIWORD(lParam);

		//(25.06.10)- 김정현
		//기본에 있는 제작칸 클릭
		if (show_inventory) {
			for (int j = 0; j < 2; ++j) {
				for (int i = 0; i < 3; ++i) {
					int x = centerx - 760 / 2 + 87 + (58 * i) + 5 * i;
					int y = 50 + 182 + (58 * j) + 5 * j;

					RECT craftingSlot = { x, y, x + 58, y + 58 };
					if (PtInRect(&craftingSlot, { mouseX, mouseY })) {
						if (i == 0 && j == 0) {
							if (HasRequiredItemsForCraft(51, 2) && HasRequiredItemsForCraft(52, 2)) {
								if (RemoveItemsFromInventory(51, 2) && RemoveItemsFromInventory(52, 2)) {
									dragInCrafting = true;
									dragCraftingX = i + j * 3;
									dragCraftingY = i + j * 3;
									dragCraftingItem = production[dragCraftingX];
								}
							}
						}
						else if (i == 1 && j == 0) {
							if (HasRequiredItemsForCraft(51, 3)) {
								if (RemoveItemsFromInventory(51, 3)) {
									dragInCrafting = true;
									dragCraftingX = i + j * 3;
									dragCraftingY = i + j * 3;
									dragCraftingItem = production[dragCraftingX];
								}
							}
						}
						else if (i == 2 && j == 0) {
							if (HasRequiredItemsForCraft(51, 5) && HasRequiredItemsForCraft(63, 2)) {
								if (RemoveItemsFromInventory(51, 5) && RemoveItemsFromInventory(63, 2)) {
									dragInCrafting = true;
									dragCraftingX = i + j * 3;
									dragCraftingY = i + j * 3;
									dragCraftingItem = production[dragCraftingX];
								}
							}
						}
						else if (i == 0 && j == 1) {
							if (HasRequiredItemsForCraft(61, 3)) {
								if (RemoveItemsFromInventory(61, 3)) {
									dragInCrafting = true;
									dragCraftingX = i + j * 3;
									dragCraftingY = i + j * 3;
									dragCraftingItem = production[dragCraftingX];
								}
							}
						}
						else if (i == 1 && j == 1) {
							if (HasRequiredItemsForCraft(62, 3)) {
								if (RemoveItemsFromInventory(62, 3)) {
									dragInCrafting = true;
									dragCraftingX = i + j * 3;
									dragCraftingY = i + j * 3;
									dragCraftingItem = production[dragCraftingX];
								}
							}
						}
						else if (i == 2 && j == 1) {
							if (HasRequiredItemsForCraft(51, 5) && HasRequiredItemsForCraft(64,1)) {
								if (RemoveItemsFromInventory(51, 5) && RemoveItemsFromInventory(64, 1)) {
									dragInCrafting = true;
									dragCraftingX = i + j * 3;
									dragCraftingY = i + j * 3;
									dragCraftingItem = production[dragCraftingX];
								}
							}
						}
						InvalidateRect(hWnd, NULL, FALSE);
						break;
					}
				}
			}
		}
		//(25.06.10) - 김정현
		//제작대의 제작칸 드래그
		if (show_craft) {
			for (int j = 0; j < 2; ++j) {
				for (int i = 0; i < 6; ++i) {
					if (i == 5 && j == 1)
						continue;
					int x = centerx - 760 / 2 + 191 + (58 * i) + 5 * i;
					int y = 50 + 147 + (58 * j) + 5 * j;

					RECT craftingSlot = { x, y, x + 58, y + 58 };
					if (PtInRect(&craftingSlot, { mouseX, mouseY })) {
						if (i == 0 && j == 0) {
							if (HasRequiredItemsForCraft(63, 3) ) {
								if (RemoveItemsFromInventory(63, 3)) {
									dragInCrafting = true;
									dragCraftingX = i + j * 6;
									dragCraftingY = i + j * 6;
									dragCraftingItem = productitem[dragCraftingX];
								}
							}
						}
						else if (i == 1 && j == 0) {
							if (HasRequiredItemsForCraft(63, 5)) {
								if (RemoveItemsFromInventory(63, 5)) {
									dragInCrafting = true;
									dragCraftingX = i + j * 6;
									dragCraftingY = i + j * 6;
									dragCraftingItem = productitem[dragCraftingX];
								}
							}
						}
						else if (i == 2 && j == 0) {
							if (HasRequiredItemsForCraft(63, 4)) {
								if (RemoveItemsFromInventory(63, 4)) {
									dragInCrafting = true;
									dragCraftingX = i + j * 6;
									dragCraftingY = i + j * 6;
									dragCraftingItem = productitem[dragCraftingX];
								}
							}
						}
						else if (i == 3 && j == 0) {
							if (HasRequiredItemsForCraft(51, 2)&& HasRequiredItemsForCraft(52, 3)) {
								if (RemoveItemsFromInventory(51, 2) && RemoveItemsFromInventory(52, 3)) {
									dragInCrafting = true;
									dragCraftingX = i + j * 6;
									dragCraftingY = i + j * 6;
									dragCraftingItem = productitem[dragCraftingX];
								}
							}
						}
						else if (i == 4 && j == 0) {
							if (HasRequiredItemsForCraft(51, 2)&& HasRequiredItemsForCraft(63, 2)) {
								if (RemoveItemsFromInventory(51, 2)&& RemoveItemsFromInventory(63, 2)) {
									dragInCrafting = true;
									dragCraftingX = i + j * 6;
									dragCraftingY = i + j * 6;
									dragCraftingItem = productitem[dragCraftingX];
								}
							}
						}
						else if (i == 5 && j == 0) {
							if (HasRequiredItemsForCraft(51, 5)&& HasRequiredItemsForCraft(64, 2)) {
								if (RemoveItemsFromInventory(51, 5)&& RemoveItemsFromInventory(64, 2)) {
									dragInCrafting = true;
									dragCraftingX = i + j * 6;
									dragCraftingY = i + j * 6;
									dragCraftingItem = productitem[dragCraftingX];
								}
							}
						}
						else if (i == 0 && j == 1) {
							if (HasRequiredItemsForCraft(64, 3)) {
								if (RemoveItemsFromInventory(64, 3)) {
									dragInCrafting = true;
									dragCraftingX = i + j * 6;
									dragCraftingY = i + j * 6;
									dragCraftingItem = productitem[dragCraftingX];
								}
							}
						}
						else if (i == 1 && j == 1) {
							if (HasRequiredItemsForCraft(64, 5)) {
								if (RemoveItemsFromInventory(64, 5)) {
									dragInCrafting = true;
									dragCraftingX = i + j * 6;
									dragCraftingY = i + j * 6;
									dragCraftingItem = productitem[dragCraftingX];
								}
							}
						}
						else if (i == 2 && j == 1) {
							if (HasRequiredItemsForCraft(64, 4)) {
								if (RemoveItemsFromInventory(64, 4) ) {
									dragInCrafting = true;
									dragCraftingX = i + j * 6;
									dragCraftingY = i + j * 6;
									dragCraftingItem = productitem[dragCraftingX];
								}
							}
						}
						else if (i == 3 && j == 1) {
							if (HasRequiredItemsForCraft(51, 7)) {
								if (RemoveItemsFromInventory(51, 7)) {
									dragInCrafting = true;
									dragCraftingX = i + j * 6;
									dragCraftingY = i + j * 6;
									dragCraftingItem = productitem[dragCraftingX];
								}
							}
						}
						else if (i == 4 && j == 1) {
							if (HasRequiredItemsForCraft(51, 1)&& HasRequiredItemsForCraft(63, 1)) {
								if (RemoveItemsFromInventory(51, 1) && RemoveItemsFromInventory(63, 1)) {
									dragInCrafting = true;
									dragCraftingX = i + j * 6;
									dragCraftingY = i + j * 6;
									dragCraftingItem = productitem[dragCraftingX];
								}
							}
						}
						InvalidateRect(hWnd, NULL, FALSE);
						break;
					}
				}
			}
		}

		//25.06.10 - 김정현
		//요리칸에서 드래그 시작
		if (show_cook) {
			if (PtInRect(&firstSlot, { mouseX, mouseY }) && cookitem[0].itemID != 0) {
				drag = true;
				drag_item = cookitem[0];
				cookitem[0].itemID = 0;
				cookitem[0].itemcnt = 0;
			}
			else if (PtInRect(&secondSlot, { mouseX, mouseY }) && cookitem[1].itemID != 0) {
				drag = true;
				drag_item = cookitem[1];
				cookitem[1].itemID = 0;
				cookitem[1].itemcnt = 0;
			}
			else if (PtInRect(&thirdSlot, { mouseX, mouseY }) && cookitem[2].itemID != 0) {
				drag = true;
				drag_item = cookitem[2];
				cookitem[2].itemID = 0;
				cookitem[2].itemcnt = 0;
				dragMouseX = mouseX;
				dragMouseY = mouseY;
			}
		}

		//(25.06.08) - 김정현
		//장신구 구현 추가
		if (show_inventory) {
			int invX = centerx - 760 / 2, invY = 60;
			RECT headSlot = { invX + 458, invY + 60,  invX + 458 + 52, invY + 60 + 52 };
			RECT bodySlot = { invX + 458, invY + 120, invX + 458 + 52, invY + 120 + 52 };
			RECT bootsSlot = { invX + 458, invY + 180, invX + 458 + 52, invY + 180 + 52 };
			RECT ringSlot = { invX + 458, invY + 240,  invX + 458 + 52, invY + 240 + 52 };

			POINT pt{ mouseX, mouseY };
			for (int slot = 0; slot < 4; ++slot) {
				RECT r = (slot == 0 ? headSlot : slot == 1 ? bodySlot : slot == 2 ? bootsSlot : ringSlot);
				if (PtInRect(&r, pt) && playeritem[slot].itemID != 0) {
					drag = true;
					dragFromEquip = true;
					drag_item = playeritem[slot];

					playeritem[slot].itemID = 0;
					playeritem[slot].itemcnt = 0;
					dragMouseX = mouseX;
					dragMouseY = mouseY;

					
					InvalidateRect(hWnd, NULL, FALSE);
					return 0; 
				}
			}
		}

		//25.06.10 - 김정현
		//요리, 제작 추가
		if(show_inventory || show_cook || show_craft) {
			int num = 0;
			for (int row = 0; row < 3; ++row) {
				int rowY = (row == 0) ? 395 : ((row == 1) ? 465 : 524);
				if (mouseY >= rowY && mouseY < rowY + 51) {
					for (int col = 0; col < 10; ++col) {
						int slotX = (centerx - 760 / 2 + 89) + (59 * col);
						if (mouseX >= slotX && mouseX < slotX + 51) {
							int clickedRow = row;
							int clickedCol = col;
							if (inventory[clickedRow][clickedCol].itemID != 0) {
								drag = true;
								dragX = clickedCol;
								dragY = clickedRow;
								drag_item = inventory[dragY][dragX];
								inventory[dragY][dragX].itemID = 0;
								inventory[dragY][dragX].itemcnt = 0;
								dragMouseX = mouseX;
								dragMouseY = mouseY;
							}
							num = 1;
							break;
						}
					}
				}
				if (num == 1)
					break;
			}
		}
		else {
			if (mouseY > clientRect.bottom - 95 + 35 && mouseY < clientRect.bottom - 95 + 35 + 51) {
				for (int i = 0; i < 10; i++) {
					if (mouseX > (centerx - 760 / 2 + 89) + (59 * i) && mouseX < (centerx - 760 / 2 + 89) + (59 * i) + 51) {
						InvenSelec_Nor = i + 1;
						break;
					}
				}
			}
		}
		InvalidateRect(hWnd, NULL, FALSE);
		break;
	}
	case WM_MOUSEMOVE: {
		mouseX = LOWORD(lParam);
		mouseY = HIWORD(lParam);

		//(25.06.10) - 김정현
		//제작칸 드래그

		if (drag || dragInCrafting) {
			dragMouseX = mouseX;
			dragMouseY = mouseY;
		}
		break;
	}
	case WM_LBUTTONUP: {
		int mouseX = LOWORD(lParam);
		int mouseY = HIWORD(lParam);

		//(25.06.10) - 김정현
		//제작칸 드래그
		if (dragInCrafting) {
			if (show_inventory ||show_cook ||show_craft) {
				//250906
				/*bool droppedInInventory = false;
				for (int row = 0; row < 3; ++row) {
					for (int col = 0; col < 10; ++col) {
						int slotX = (centerx - 760 / 2 + 89) + (59 * col);
						int slotY = (row == 0) ? 395 : (row == 1) ? 465 : 524;

						RECT invSlot = { slotX, slotY, slotX + 51, slotY + 51 };

						if (PtInRect(&invSlot, { mouseX, mouseY }) && inventory[row][col].itemID == 0) {
							inventory[row][col] = dragCraftingItem;
							droppedInInventory = true;
							break;
						}
					}
				}*/
				//if (!droppedInInventory) {
				AddItemToInventory(dragCraftingItem.itemID, 1);
				//}
				//250906
			}
			dragInCrafting = false;
			dragCraftingX = -1;
			dragCraftingY = -1;
			InvalidateRect(hWnd, NULL, FALSE);
		}

		////요리칸 드래그
		//if (drag&& show_cook) {
		//	if (PtInRect(&firstSlot, { mouseX, mouseY }) && cookitem[0].itemID == 0) {
		//		cookitem[0] = drag_item;
		//	}
		//	else if (PtInRect(&secondSlot, { mouseX, mouseY }) && cookitem[1].itemID == 0) {
		//		cookitem[1] = drag_item;
		//	}
		//	else {
		//		AddItemToInventory(drag_item.itemID, drag_item.itemcnt);
		//	}

		//	if (cookitem[0].itemID != 0 && cookitem[1].itemID != 0) {
		//		if (CanCombine(cookitem[0], cookitem[1])) {
		//			cookitem[2] = CombineItems(cookitem[0], cookitem[1]);
		//			--cookitem[0].itemcnt;
		//			--cookitem[1].itemcnt;
		//			if (cookitem[0].itemcnt == 0)
		//				cookitem[0].itemID = 0;
		//			if (cookitem[1].itemcnt == 0)
		//				cookitem[1].itemID = 0;
		//		}
		//	}
		//	drag = false;
		//	dragX = -1;
		//	dragY = -1;
		//}
		//if (drag && (show_cook /* || show_craft*/)) { //250906
		//	bool droppedInInventory = false;
		//	
		//	for (int row = 0; row < 3; ++row) {
		//		for (int col = 0; col < 10; ++col) {
		//			int slotX = centerx - 760 / 2 + 89 + 59 * col;
		//			int slotY = (row == 0) ? 395 : (row == 1) ? 465 : 524;

		//			RECT invSlot = { slotX, slotY, slotX + 51, slotY + 51 };

		//			if (PtInRect(&invSlot, { mouseX, mouseY }) && inventory[row][col].itemID == 0) {
		//				inventory[row][col] = drag_item;
		//				droppedInInventory = true;
		//				break;
		//			}
		//		}
		//		if (droppedInInventory) break;
		//	}
		//	if (!droppedInInventory) {
		//		AddItemToInventory(drag_item.itemID, drag_item.itemcnt);
		//	}
		//	
		//	InvalidateRect(hWnd, NULL, FALSE);
		//}
		if (drag) {

			//쓰레기통에 템 버리기
			RECT trash = { 258, 380, 258 + 70, 380 + 110 };
			if (PtInRect(&trash, { mouseX, mouseY })) {
				drag = dragFromEquip = false;
				dragX = dragY = -1;
				InvalidateRect(hWnd, NULL, FALSE);
				break;
			}

			//(25.06.08) - 김정현
			//장비칸 드래그
			if (!dragFromEquip) {
				int invX = centerx - 760 / 2, invY = 60;
				RECT head = { invX + 458, invY + 60,   invX + 458 + 52, invY + 60 + 52 };
				RECT body = { invX + 458, invY + 120,  invX + 458 + 52, invY + 120 + 52 };
				RECT boots = { invX + 458, invY + 180,  invX + 458 + 52, invY + 180 + 52 };
				RECT ring = { invX + 458, invY + 240,  invX + 458 + 52, invY + 240 + 52 };

				if (PtInRect(&head, { mouseX,mouseY })) {
					if (playeritem[0].itemID == 0) {
						playeritem[0] = drag_item;
						if (not challenge[2]) challenge[2] = 1;
						
						if (playeritem[3].itemID == 23 && p.hp < p.maxHp) {
							p.hp = min(p.hp + 5, p.maxHp);
						}
					}
					else {
						inventory[dragY][dragX] = drag_item;
					}
					drag = false;
					InvalidateRect(hWnd, NULL, FALSE);
					break;
				}
				if (PtInRect(&body, { mouseX,mouseY })) {
					if (playeritem[1].itemID == 0) {
						playeritem[1] = drag_item;
						if (not challenge[2]) challenge[2] = 1;
						
						if (playeritem[3].itemID == 23 && p.hp < p.maxHp) {
							p.hp = min(p.hp + 5, p.maxHp);
						}
					}
					else {
						inventory[dragY][dragX] = drag_item;
					}
					drag = false;
					InvalidateRect(hWnd, NULL, FALSE);
					break;
				}
				if (PtInRect(&boots, { mouseX,mouseY })) {
					if (playeritem[2].itemID == 0) {
						playeritem[2] = drag_item;
						if (not challenge[2]) challenge[2] = 1;
						
						if (playeritem[3].itemID == 23 && p.hp < p.maxHp) {
							p.hp = min(p.hp + 5, p.maxHp);
						}
					}
					else {
						inventory[dragY][dragX] = drag_item;
					}
					drag = false;
					InvalidateRect(hWnd, NULL, FALSE);
					break;
				}
				if (PtInRect(&ring, { mouseX,mouseY })) {
					if (playeritem[3].itemID == 0) {
						playeritem[3] = drag_item;
						if (not challenge[2]) challenge[2] = 1;
						
						if (playeritem[3].itemID == 23 && p.hp < p.maxHp) {
							p.hp = min(p.hp + 5, p.maxHp);
						}
					}
					else {
						inventory[dragY][dragX] = drag_item;
					}
					drag = false;
					InvalidateRect(hWnd, NULL, FALSE);
					break;
				}

				bool placed = false;
				for (int row = 0; row < 3 && !placed; ++row) {
					int rowY = (row == 0 ? 395 : (row == 1 ? 465 : 524));
					if (mouseY < rowY || mouseY >= rowY + 51) continue;
					for (int col = 0; col < 10; ++col) {
						int slotX = centerx - 760 / 2 + 89 + 59 * col;
						if (mouseX >= slotX && mouseX < slotX + 51 && inventory[row][col].itemID == 0) {
							inventory[row][col] = drag_item;
							placed = true;
							break;
						}
					}
				}
				if (!placed && dragX >= 0) {
					inventory[dragY][dragX] = drag_item;
				}

				drag = false;
				dragX = dragY = -1;
				InvalidateRect(hWnd, NULL, FALSE);
				break;
			}
			bool placed = false;
			for (int row = 0; row < 3 && !placed; ++row) {
				int rowY = (row == 0 ? 395 : (row == 1 ? 465 : 524));
				if (mouseY < rowY || mouseY >= rowY + 51) continue;
				for (int col = 0; col < 10; ++col) {
					int slotX = centerx - 760 / 2 + 89 + 59 * col;
					if (mouseX >= slotX && mouseX < slotX + 51 && inventory[row][col].itemID == 0) {
						inventory[row][col] = drag_item;
						placed = true;
						break;
					}
				}
			}
			if (!placed) {
				int id = drag_item.itemID;
				int slot = (id == 13 || id == 14) ? 3 : ((id / 10) - 2);
				if (slot >= 0 && slot < 4) {
					playeritem[slot] = drag_item;
				}
			}
			drag = dragFromEquip = false;
			InvalidateRect(hWnd, NULL, FALSE);
			break;

			bool dropped = false;
			int n = 0;
			for (int row = 0; row < 3; ++row) {
				int rowY = (row == 0) ? 395 : ((row == 1) ? 465 : 524);
				if (mouseY >= rowY && mouseY < rowY + 51) {
					for (int col = 0; col < 10; ++col) {
						int slotX = (centerx - 760 / 2 + 89) + (59 * col);
						if (mouseX >= slotX && mouseX < slotX + 51) {
							if (inventory[row][col].itemID == 0) {
								inventory[row][col] = drag_item;
							}
							else {
								inventory[dragY][dragX] = drag_item;
							}
							dropped = true;
							n = 1;
							break;
						}
					}
				}
				if (n == 1)
					break;
			}
			if (!dropped) {
				inventory[dragY][dragX] = drag_item;
			}

			drag = false;
			dragX = -1;
			dragY = -1;
		}
		InvalidateRect(hWnd, NULL, FALSE);
		break;
	}
	case WM_KEYDOWN: {

		switch (wParam) {
		case VK_TAB: {
			if (!show_cook && !show_craft) {
				show_inventory = !show_inventory;
				InvenSelec_Ex_x = 1;
				InvenSelec_Ex_y = 1;
			}
			break;
		}
		//2506103 esc키, p키
		case VK_ESCAPE:
			if (show_inventory) show_inventory = false;
			if (show_pclick) show_pclick = false;
			if (show_craft) show_craft = false;
			if (show_cook) show_cook = false;
			break;
		case 'R':
		case 'r':
			if (p.died_flag) {
				reset_flag[0] = true;
			}
			//2506104
			//2506105
			if (screen == 0) {
				reset_flag[1] = true;
				game_end_flag = false;
			}
			if (screen == 1 and game_end_flag) {
				screen = 0;
			}
			break;
		case 'q':
		case 'Q':
			if ((screen == 1 and game_end_flag) or screen == 0) {
				CleanupInvBitmaps();
				CleanupItemBitmaps();
				CleanupPlayerSprite();
				CleanupBossSprite();
				DeleteDC(ArrowDC);
				DeleteObject(arrowBmp);
				PostQuitMessage(0);
			}
			break;
		case 'p':
		case 'P':
			if(not (show_inventory or show_craft or show_cook))
				show_pclick = show_pclick ? false : true;
			break;
		//(25.06.10) - 오시은
		//요리, 열쇠 상호작용 작성중
		case 'E':
		case 'e':
		{
			int playerWorldX = bx + p.x;
			int playerWorldY = by + p.y;
			DWORD now = GetTickCount64();

			int slot = InvenSelec_Nor - 1;

			if (slot >= 0 && slot < 10) {
				int heldItemID = inventory[0][slot].itemID;

				//열쇠, 요리 상호작용
				CraftAndInteraction(p, bx, by, inventory[0][slot], show_craft, show_cook, boss_flag);
				if (heldItemID >= 81 and heldItemID <= 84) {
					if (eat_dealy > 10) {
						eat_dealy = 0;
						Eat(p, inventory[0][slot]);
					}
				}
			}

			break;
		}
		case 'A': //250914 - 보스공격 수정
		case 'a':{ //무기 공격 (단검, 장검, 활, 불)
			int playerWorldX = bx + p.x;
			int playerWorldY = by + p.y;
			DWORD now = GetTickCount64();

			bool Arrow_ex = false;
			int slot = InvenSelec_Nor - 1;
			if (slot >= 0 && slot < 10 && inventory[0][slot].itemID == 3 && inventory[0][slot].itemcnt>0) {
				Arrow_ex = true;
			}

			if (slot >= 0 && slot < 10) {
				int heldItemID = inventory[0][slot].itemID;
				if (heldItemID == 1) {
					AttackDagger(playerWorldX, playerWorldY, p.dir, monster1, monster1_cnt);
					AttackDagger(playerWorldX, playerWorldY, p.dir, monster2, monster2_cnt);
					p.atkType = 1;
					if (boss_flag)
						CheckBossHit(boss, p, bx, by, p.dir, now, boss_flag, heldItemID);
				}
				else if (heldItemID == 2) {
					AttackLongsword(playerWorldX, playerWorldY, p.dir, monster1, monster1_cnt);
					AttackLongsword(playerWorldX, playerWorldY, p.dir, monster2, monster2_cnt);
					p.atkType = 2;
					if (boss_flag)
						CheckBossHit(boss, p, bx, by, p.dir, now, boss_flag, heldItemID);
				}
				else if (heldItemID == 3 && Arrow_ex) {
					if (now - p.lastArrowTime >= Player::COOLDOWN_MS) {
						for (int i = 0; i < 3; i++) {
							for (int j = 0; j < 10; j++) {
								if (inventory[i][j].itemID == 13 && inventory[i][j].itemcnt > 0) {
									ShootArrow(bx + p.x, by + p.y, p.dir);
									--inventory[i][j].itemcnt;
									if (inventory[i][j].itemcnt == 0)
										inventory[i][j].itemID = 0;
									p.lastArrowTime = now;
									if (boss_flag)
										CheckBossHit(boss, p, bx, by, p.dir, now, boss_flag, heldItemID);
									goto shot;
								}
							}
						}
					}
				}
				else if (heldItemID == 4) {
					DWORD now = GetTickCount64();
					if (p.mp >= 5 && now - p.lastMagicTime >= Player::COOLDOWN_MS) {
						p.mp -= 5;
						ShootMagic(playerWorldX, playerWorldY, p.dir);
						p.lastMagicTime = now;
						if (boss_flag)
							CheckBossHit(boss, p, bx, by, p.dir, now, boss_flag, heldItemID);
					}
					break;
				}
				//(25.06.08) - 오시은
				//곡괭이, 삽
				//(25.06.09) - 김정현
				//벽, 바닥 체크
				else if (heldItemID == 11) {
					Mining2(p, bx, by);
				}
				else if (heldItemID == 12) {
					Mining(p, bx, by);
				}

				//(25.06.10) - 오시은
				//나무 캐기, 조합대, 요리제작대 캐기
				if (not (heldItemID > 0 and heldItemID < 13)) {
					Mining3(p, bx, by);
				}

				//(25.06.08) - 김정현
				//장검, 단검 공격모션 추가
				if (heldItemID == 1 || heldItemID == 2) {
					p.isAttacking = true;
					p.atkDir = DIR_TO_ATK_ROW[p.dir];
					p.atkStart = GetTickCount64();
					p.atkFrame = 0;
					p.atkType = (heldItemID == 1 ? 1 : 2);
				}
			}
		shot:;
			break;
		}
		case 'C': //(25.06.08) - 김정현
		case 'c': { //물 불 바꾸는 키
			useWaterEffect = !useWaterEffect;
			break;
		}//(25.06.02) - 김정현
		//인벤창 숫자로 이동 구현.
		case '1': InvenSelec_Nor = 1; break;
		case '2': InvenSelec_Nor = 2; break;
		case '3': InvenSelec_Nor = 3; break;
		case '4': InvenSelec_Nor = 4; break;
		case '5': InvenSelec_Nor = 5; break;
		case '6': InvenSelec_Nor = 6; break;
		case '7': InvenSelec_Nor = 7; break;
		case '8': InvenSelec_Nor = 8; break;
		case '9': InvenSelec_Nor = 9; break;
		case '0': InvenSelec_Nor = 10; break;
		}
		InvalidateRect(hWnd, NULL, FALSE);
		break;
	}
	case WM_PAINT:
	{
		GetClientRect(hWnd, &clientRect);
		hdc = BeginPaint(hWnd, &ps);
		mdc = CreateCompatibleDC(hdc);
		hbitmap = CreateCompatibleBitmap(hdc, clientRect.right, clientRect.bottom);
		SelectObject(mdc, (HBITMAP)hbitmap);
		memdc = CreateCompatibleDC(mdc);
		memdc2 = CreateCompatibleDC(mdc);
		FillRect(mdc, &clientRect, (HBRUSH)GetStockObject(WHITE_BRUSH));

		if (screen == 0) {
			SelectObject(memdc, mainscreen);
			BitBlt(mdc, 0, 0, clientRect.right, clientRect.bottom, memdc, 0, 0, SRCCOPY);
		}
		else if(screen==1){
			int start_col{ bx / CELL_SIZE };
			int start_row{ by / CELL_SIZE };
			int offset_x{ bx % CELL_SIZE };
			int offset_y{ by % CELL_SIZE };

			//(25.06.07) - 오시은
			//맵 비트맵 적용
			////(25.06.08) - 오시은
			//수정함

			int wallpaint{};
			for (int row{}; row <= SCREEN_HEIGHT; ++row) {
				for (int col{}; col <= SCREEN_WIDTH; ++col) {
					int map_row = start_row + row;
					int map_col = start_col + col;

					if (map_row >= MAP_HEIGHT or map_col >= MAP_WIDTH) continue;

					int x = col * CELL_SIZE - offset_x;
					int y = row * CELL_SIZE - offset_y;

					//(25.06.10) - 오시은
					//제작대, 요리대, 상자
					switch (game_map[map_row][map_col].type) {
					case 0:
					case 8:
					case 9:
					case 10:
					case 11:
						SelectObject(memdc, ground[0]);
						DrawGroundTile(mdc, memdc, x, y, map_col, map_row);
						break;
					case 1:
					case 2:
					case 3:
						wallpaint = 0;
						SelectObject(memdc, ground[0]);
						SelectObject(memdc2, wall);
						DrawWallTile(mdc, &memdc, memdc2, x, y, map_col, map_row, wallpaint);
						break;
					case 5:
					case 6:
					{
						int groundtile_num{};
						if (game_map[map_row][map_col].type == 5)
							groundtile_num = 1;
						else if (game_map[map_row][map_col].type == 6)
							groundtile_num = 2;
						SelectObject(memdc2, ground[groundtile_num]);
						DrawGround2Tile(mdc, memdc2, x, y, map_col, map_row);
						break;
					}
					case 7:
						SelectObject(memdc, ground[0]);
						SelectObject(memdc2, water);
						DrawWaterTile(mdc, memdc, memdc2, x, y, map_col, map_row, water_sel);
						break;
					}
				}
			}

			//(25.06.09)-김정현
			//템 드랍 (위치 변경)
			itemDC = CreateCompatibleDC(mdc);
			SelectObject(itemDC, Itembmp);
			DrawWorldItems(mdc, itemDC);
			DeleteDC(itemDC);

			//(25.06.08) - 김정현
			//날아가는 화살, 불 그리기
			DrawArrows(mdc, bx, by);
			DrawMagics(mdc, bx, by);

			//(25.06.09) - 김정현
			//몬스터, 플레이어 순서 변경

			//(25.06.07) - 김정현
			//몬스터 그리기 (벽 뒤에있는 몬스터는 벽에 가려지게 위치 옮김)
			for (int i = 0; i < monster1_cnt; ++i) {
				DrawMonster(&monster1[i], mdc);
			}
			for (int i = 0; i < monster2_cnt; ++i) {
				DrawMonster(&monster2[i], mdc);
			}

			//(25.06.07) - 김정현
			//플레이어 그리기
			DrawPlayer(&p, mdc);

			//(25.06.08) - 김정현
			//공격모션 그리기
			if (p.isAttacking) {
				DWORD now = GetTickCount64();
				DWORD elapsed = now - p.atkStart;

				int frame = (elapsed / 100) % ATK_COLS;
				if (elapsed > 100 * ATK_COLS) {
					p.isAttacking = false;
				}
				else {
					HDC dc = (p.atkType == 1 ? DaggerAttackDC : LongswordAttackDC);
					int row = p.atkDir;

					RECT dest;
					if (p.atkType == 1) {
						dest = { p.x - ATK_SPR_WD / 2, p.y - ATK_SPR_HD / 2, p.x + ATK_SPR_WD / 2, p.y + ATK_SPR_HD / 2 };
						int sx = frame * ATK_SPR_WD;
						int sy = row * ATK_SPR_HD;
						TransparentBlt(mdc, dest.left, dest.top, ATK_SPR_WD, ATK_SPR_HD, dc, sx, sy, ATK_SPR_WD, ATK_SPR_HD, RGB(0, 0, 255));
					}
					else {
						dest = { p.x - ATK_SPR_WL / 2, p.y - ATK_SPR_HL / 2, p.x + ATK_SPR_WL / 2, p.y + ATK_SPR_HL / 2 };
						int sx = frame * ATK_SPR_WL;
						int sy = row * ATK_SPR_HL;
						TransparentBlt(mdc, dest.left, dest.top, ATK_SPR_WL, ATK_SPR_HL, dc, sx, sy, ATK_SPR_WL, ATK_SPR_HL, RGB(0, 0, 255));
					}
				}
			}

			//벽에 가려진 땅 부분 비트맵
			//(25.06.10) - 오시은
			//수정함
			for (int row{}; row <= SCREEN_HEIGHT; ++row) {
				for (int col{}; col <= SCREEN_WIDTH; ++col) {
					int map_row = start_row + row;
					int map_col = start_col + col;

					if (map_row >= MAP_HEIGHT or map_col >= MAP_WIDTH) continue;

					int x = col * CELL_SIZE - offset_x;
					int y = row * CELL_SIZE - offset_y;

					switch (game_map[map_row][map_col].type) {
					case 0:
					case 5:
					case 6:
					case 7:
					case 9:
					case 10:
					case 11:
						SelectObject(memdc2, wall);
						DrawGroundwallTile(mdc, memdc2, x, y, map_col, map_row);
						break;
					case 1:
					case 2:
					case 3:
						wallpaint = 1;
						SelectObject(memdc2, wall);
						DrawWallTile(mdc, NULL, memdc2, x, y, map_col, map_row, wallpaint);
						break;
					}
				}
			}


			//(25.06.09) - 김정현
			//보스 그리기
			//2506103 보스위치, 코드 위치 수정
			if (boss_flag) {
				DrawBossMonster(mdc, boss, bx, by, attackEffect);
			}

			//(25.06.07) - 오시은
			//맵 전체 그림자 (알파블렌딩) - 수정해야함
			//(25.06.08) - 오시은
			//수정완료
			maskDC = CreateCompatibleDC(mdc);
			oldMask = SelectObject(maskDC, g_LightMask);

			int maskX = p.x - g_LightWidth / 2;
			int maskY = p.y - g_LightHeight / 2;

			blend = { AC_SRC_OVER, 0, 255, AC_SRC_ALPHA };
			AlphaBlend(mdc, maskX, maskY, g_LightWidth, g_LightHeight,
				maskDC, 0, 0, g_LightWidth, g_LightHeight, blend);

			SelectObject(maskDC, oldMask);
			DeleteDC(maskDC);


			//(25.06.06) - 김정현
			//hp,mp,허기 바 그리기(비트맵 없어서 이렇게 해놓음)
			//(25.06.07) - 오시은
			//비트맵 적용

			const int barMaxW = 274;
			int barH = 23;
			int barX = 10, barY = 10;

			int hpW = (p.hp * barMaxW) / p.maxHp;
			if (hpW < 0) hpW = 0;
			if (hpW > barMaxW) hpW = barMaxW;

			SelectObject(memdc, hp_bar);
			TransparentBlt(mdc, barX, barY, barMaxW, barH, memdc, 0, 0, barMaxW, barH, RGB(0, 0, 255));
			TransparentBlt(mdc, barX, barY, hpW, barH, memdc, 0, 23, hpW, barH, RGB(0, 0, 255));

			barY += barH + 5;
			int mpW = p.mp * barMaxW / 100;
			if (mpW < 0) mpW = 0;
			if (mpW > barMaxW) mpW = barMaxW;

			SelectObject(memdc, mp_bar);
			TransparentBlt(mdc, barX, barY, barMaxW, barH, memdc, 0, 0, barMaxW, barH, RGB(0, 0, 255));
			TransparentBlt(mdc, barX, barY, mpW, barH, memdc, 0, 23, mpW, barH, RGB(0, 0, 255));

			barY += barH + 5;
			barH = 12;
			int hungerW = p.hunger * barMaxW / 100;
			if (hungerW < 0) hungerW = 0;
			if (hungerW > barMaxW) hungerW = barMaxW;

			SelectObject(memdc, stmn_bar);
			TransparentBlt(mdc, barX, barY, barMaxW, barH, memdc, 0, 0, barMaxW, barH, RGB(0, 0, 255));
			TransparentBlt(mdc, barX, barY, hungerW, barH, memdc, 0, 12, hungerW, barH, RGB(0, 0, 255));

			//(25.06.02) - 김정현
			//제작창, 장신구창, 인벤창 비트맵 적용
			//(25.06.04) - 오시은
			//인벤토리창, 아이템 좌표 재조정

			//(25.06.04) - 김정현
			//인벤토리 숫자가 위로오게 수정, 비트맵 로드 방식 변경
			//(25.06.08) - 오시은
			//HDC 만들면 렉걸려서 위에서 정의함

			hdcUse = show_inventory ? hdcExpanded : hdcNormal;
			hdcNum = show_inventory ? hdcExpandednum : hdcNormalnum;
			hdcselec = show_inventory ? hdcSelecInven_Ex : hdcSelecInven_Nor;


			if (show_inventory)
				TransparentBlt(mdc, centerx - 760 / 2, 50, 760, 547, hdcUse, 0, 0, bmpExp_W, bmpExp_H, RGB(0, 0, 255));
			else {
				if (!show_cook && !show_craft)
					TransparentBlt(mdc, centerx - 760 / 2, clientRect.bottom - 95, 760, 95, hdcUse, 0, 0, bmpNor_W, bmpNor_H, RGB(0, 0, 255));
			}
			//(25.06.08) - 김정현
			//장비칸 그리기 (위치 변경) + 장신구 추가

			int invX = centerx - 760 / 2;
			int invY = 60;

			RECT headSlot = { invX + 458, invY + 60, invX + 458 + 52, invY + 60 + 52 };
			RECT bodySlot = { invX + 458, invY + 120, invX + 458 + 52, invY + 120 + 52 };
			RECT bootsSlot = { invX + 458, invY + 180, invX + 458 + 52, invY + 180 + 52 };
			RECT ringSlot = { invX + 458, invY + 240, invX + 458 + 52, invY + 240 + 52 };

			if (show_inventory) {
				HDC  hdcScreen = GetDC(NULL);
				HDC  hdcMemItem = CreateCompatibleDC(hdcScreen);
				SelectObject(hdcMemItem, Itembmp);
				// 머리
				if (playeritem[0].itemID) {
					int sx, sy;
					GetItemTileCoords(playeritem[0].itemID, sx, sy);
					TransparentBlt(mdc,
						headSlot.left, headSlot.top, 52, 52,
						hdcMemItem, sx, sy, ITEM_SIZE, ITEM_SIZE,
						RGB(0, 0, 255));
				}
				// 몸통
				if (playeritem[1].itemID) {
					int sx, sy;
					GetItemTileCoords(playeritem[1].itemID, sx, sy);
					TransparentBlt(mdc,
						bodySlot.left, bodySlot.top, 52, 52,
						hdcMemItem, sx, sy, ITEM_SIZE, ITEM_SIZE,
						RGB(0, 0, 255));
				}
				// 신발
				if (playeritem[2].itemID) {
					int sx, sy;
					GetItemTileCoords(playeritem[2].itemID, sx, sy);
					TransparentBlt(mdc,
						bootsSlot.left, bootsSlot.top, 52, 52,
						hdcMemItem, sx, sy, ITEM_SIZE, ITEM_SIZE,
						RGB(0, 0, 255));
				}
				//장신구
				if (playeritem[3].itemID) {
					int sx, sy;
					GetItemTileCoords(playeritem[3].itemID, sx, sy);
					TransparentBlt(mdc,
						ringSlot.left, ringSlot.top, 52, 52,
						hdcMemItem, sx, sy, ITEM_SIZE, ITEM_SIZE,
						RGB(0, 0, 255));
				}
				DeleteDC(hdcMemItem);
				ReleaseDC(NULL, hdcScreen);
			}

			//(25.06.10) - 김정현
			//제작대 구현
			if (show_craft) {
				hdcCraftUI = CreateCompatibleDC(NULL);
				SelectObject(hdcCraftUI, craftUI);
				TransparentBlt(mdc, centerx - 760 / 2, 50, 760, 547, hdcCraftUI, 0, 0, bmpExp_W, bmpExp_H, RGB(0, 0, 255));
				DeleteDC(hdcCraftUI);
			}
			//요리대 구현
			if (show_cook) {
				hdcCookUI = CreateCompatibleDC(NULL);
				SelectObject(hdcCookUI, cookUI);
				TransparentBlt(mdc, centerx - 760 / 2, 50, 760, 547, hdcCookUI, 0, 0, bmpExp_W, bmpExp_H, RGB(0, 0, 255));
				DeleteDC(hdcCookUI);
			}
			//요리대 아이템 출력
			if (show_cook) {
				HDC itemDC = CreateCompatibleDC(mdc);
				SelectObject(itemDC, Itembmp);
				SelectObject(memdc, Numbmp);
				DrawCookItems(mdc, itemDC, memdc);
				DeleteDC(itemDC);
			}
			//(25.06.04) - 김정현
			//인벤 속 아이템 수정,아이템 드래그

			hdcMemItem = CreateCompatibleDC(hdc);
			SelectObject(hdcMemItem, Itembmp);

			if (show_inventory || show_craft || show_cook) {
				for (int row = 0; row < 3; ++row) {
					for (int col = 0; col < 10; ++col) {
						int itemID = inventory[row][col].itemID;
						int itemCnt = inventory[row][col].itemcnt;
						if (itemID == 0) continue;

						int sx, sy;
						GetItemTileCoords(itemID, sx, sy);

						int drawX = (centerx - 760 / 2 + 89) + (59 * col) + 2;
						int drawY;

						if (row == 0)
							drawY = 390;
						else if (row == 1)
							drawY = 465;
						else
							drawY = 524;

						TransparentBlt(mdc, drawX, drawY, ITEM_SIZE - 5, ITEM_SIZE - 5, hdcMemItem, sx, sy, ITEM_SIZE, ITEM_SIZE, RGB(0, 0, 255));

						//아이템 개수 비트맵
						if (itemCnt > 1) {
							int cnt = itemCnt;
							if (cnt < 1) cnt = 1;
							if (cnt > 10) cnt = 10;

							int sx, sy;
							GetNumberTileCoords(cnt, sx, sy);

							SelectObject(memdc, Numbmp);
							TransparentBlt(mdc, drawX + 3, drawY + 3, ITEM_SIZE, ITEM_SIZE, memdc, sx, sy, ITEM_SIZE, ITEM_SIZE, RGB(0, 0, 255));
						}
					}
				}
				if (show_inventory) {
					//(25.06.08) - 오시은
					//인벤토리 캐릭터

					int drawX = centerx + 210;
					int drawY = centery - 130;

					DrawPlayer(drawX, drawY, iven_character_anim, mdc);
				}
			}
			else {
				for (int col = 0; col < 10; ++col) {
					int itemID = inventory[0][col].itemID;
					int itemCnt = inventory[0][col].itemcnt;
					if (itemID == 0) continue;

					int sx, sy;
					GetItemTileCoords(itemID, sx, sy);

					int drawX = (centerx - 760 / 2 + 89) + (59 * col);
					int drawY = clientRect.bottom - 95 + 35;

					TransparentBlt(mdc, drawX, drawY, ITEM_SIZE, ITEM_SIZE, hdcMemItem, sx, sy, ITEM_SIZE, ITEM_SIZE, RGB(0, 0, 255));

					//아이템 개수 비트맵
					if (itemCnt > 1) {
						int cnt = itemCnt;
						if (cnt < 1) cnt = 1;
						if (cnt > 10) cnt = 10;

						int sx, sy;
						GetNumberTileCoords(cnt, sx, sy);

						SelectObject(memdc, Numbmp);
						TransparentBlt(mdc, drawX + 3, drawY + 3, ITEM_SIZE, ITEM_SIZE, memdc, sx, sy, ITEM_SIZE, ITEM_SIZE, RGB(0, 0, 255));
					}
				}
			}

			//(25.06.10) - 김정현
			//인벤토리 제작칸 구현 + 설명창
			int craftingItems[2][3] = { {11, 12, 91},{63, 64, 92} };
			if (show_inventory) {
				for (int j = 0; j < 2; ++j) {
					for (int i = 0; i < 3; ++i) {

						int x = centerx - 760 / 2 + 86 + (63 * i);
						int y = 50 + 182 + (63 * j);

						int sx, sy;
						if (dragInCrafting && dragCraftingX == (i + j * 3)) {
							GetItemTileCoords(dragCraftingItem.itemID, sx, sy);
							TransparentBlt(mdc, dragMouseX - ITEM_SIZE / 2, dragMouseY - ITEM_SIZE / 2, ITEM_SIZE, ITEM_SIZE, hdcMemItem, sx, sy, ITEM_SIZE, ITEM_SIZE, RGB(0, 0, 255));
						}
					}
				}
			} //(25.06.10) - 김정현
			//제작대 제작칸 드래그
			else if (show_craft) {
				for (int j = 0; j < 2; ++j) {
					for (int i = 0; i < 6; ++i) {
						int x = centerx - 760 / 2 + 191 + (63 * i);
						int y = 50 + 147 + (63 * j);

						int sx, sy;
						if (dragInCrafting && dragCraftingX == (i + j * 6)) {
							GetItemTileCoords(dragCraftingItem.itemID, sx, sy);
							TransparentBlt(mdc, dragMouseX - ITEM_SIZE / 2, dragMouseY - ITEM_SIZE / 2, ITEM_SIZE, ITEM_SIZE, hdcMemItem, sx, sy, ITEM_SIZE, ITEM_SIZE, RGB(0, 0, 255));
						}
					}
				}
			}

			if ((show_inventory) && !drag) {
				for (int j = 0; j < 2; ++j) {
					for (int i = 0; i < 3; ++i) {
						int x = centerx - 760 / 2 + 87 + (58 * i) + 5 * i;
						int y = 50 + 182 + (58 * j) + 5 * j;
						RECT craftingSlot = { x, y, x + 58, y + 58 };

						POINT pt = { mouseX, mouseY };
						if (PtInRect(&craftingSlot, pt) && production[j * 3 + i].itemID != 0) {
							TransparentBlt(mdc, mouseX, mouseY - 106, 154, 106, itemDescDC, 0, 0, 154, 106, RGB(0, 0, 255));
							TransparentBlt(mdc, mouseX, mouseY - 106, 154, 106, itemDescDC, (production[j * 3 + i].itemID % 10 - 1) * 154, (production[j * 3 + i].itemID / 10 + 1) * 106, 154, 106, RGB(0, 0, 255));
							InvalidateRect(hWnd, NULL, FALSE);
							break;
						}
					}
				}
			}
			//25.06.10 - 김정현
			//제작대 제작칸 설명창
			if ((show_craft) && !drag) {
				for (int j = 0; j < 2; ++j) {
					for (int i = 0; i < 6; ++i) {
						int x = centerx - 760 / 2 + 191 + (58 * i) + 5 * i;
						int y = 50 + 147 + (58 * j) + 5 * j;
						RECT craftingSlot = { x, y, x + 58, y + 58 };

						POINT pt = { mouseX, mouseY };
						if (PtInRect(&craftingSlot, pt) && productitem[j * 6 + i].itemID != 0) {
							TransparentBlt(mdc, mouseX, mouseY - 106, 154, 106, itemDescDC, 0, 0, 154, 106, RGB(0, 0, 255));
							TransparentBlt(mdc, mouseX, mouseY - 106, 154, 106, itemDescDC, (productitem[j * 6 + i].itemID % 10 - 1) * 154, (productitem[j * 6 + i].itemID / 10 + 1) * 106, 154, 106, RGB(0, 0, 255));
							InvalidateRect(hWnd, NULL, FALSE);
							break;
						}
					}
				}
			}

			if (drag) {
				int dragID = drag_item.itemID;
				if (dragID != 0) {
					int sx, sy;
					GetItemTileCoords(dragID, sx, sy);

					int dragX = dragMouseX - ITEM_SIZE / 2;
					int dragY = dragMouseY - ITEM_SIZE / 2;

					TransparentBlt(mdc, dragX, dragY, ITEM_SIZE, ITEM_SIZE, hdcMemItem, sx, sy, ITEM_SIZE, ITEM_SIZE, RGB(0, 0, 255));
				}
			}


			DeleteDC(hdcMemItem);

			//숫자가 아이템 위로 오도록
			if (show_inventory || show_cook || show_craft) {
				TransparentBlt(mdc, centerx - 760 / 2, 50, 760, 547, hdcNum, 0, 0, bmpExp_W, bmpExp_H, RGB(0, 0, 255));
				TransparentBlt(mdc, (centerx - 760 / 2 + 89) + 59 * (InvenSelec_Nor - 1), 389, 52, 53, hdcselec, 0, 0, 52, 53, RGB(0, 0, 255));

			}
			else {
				TransparentBlt(mdc, centerx - 760 / 2, clientRect.bottom - 95, 760, 95, hdcNum, 0, 0, bmpNor_W, bmpNor_H, RGB(0, 0, 255));
				TransparentBlt(mdc, (centerx - 760 / 2 + 89) + 59 * (InvenSelec_Nor - 1), clientRect.bottom - 95 + 35, 52, 53, hdcselec, 0, 0, 52, 53, RGB(0, 0, 255));
			}
			//(25.06.09) - 김정현
			//인벤 아이템 설명창(완료)
			if ((show_inventory || show_cook || show_craft) && !drag) {
				for (int row = 0; row < 3; ++row) {
					for (int col = 0; col < 10; ++col) {
						int slotX = (centerx - 760 / 2 + 89) + (59 * col);
						int slotY = (row == 0) ? 395 : (row == 1) ? 465 : 524;
						RECT slotRect = { slotX, slotY, slotX + 52, slotY + 52 };

						POINT pt = { mouseX, mouseY };
						if (PtInRect(&slotRect, pt) && inventory[row][col].itemID != 0) {
							TransparentBlt(mdc, mouseX, mouseY - 106, 154, 106, itemDescDC, 0, 0, 154, 106, RGB(0, 0, 255));
							TransparentBlt(mdc, mouseX, mouseY - 106, 154, 106, itemDescDC, (inventory[row][col].itemID % 10 - 1) * 154, (inventory[row][col].itemID / 10 + 1) * 106, 154, 106, RGB(0, 0, 255));
						}
					}
				}
			}


			//2506103 도전과제 완료(변수만 조정하면 됨)
			if (show_pclick) {
				SelectObject(memdc, pclick[0]);
				TransparentBlt(mdc, centerx - 461 / 2, centery - 573 / 2, 461, 573, memdc, 0, 0, 461, 573, RGB(0, 0, 255));

				for (int i{}; i < 6; i++) {
					if (challenge[i]) {
						SelectObject(memdc, pclick[1]);
						TransparentBlt(mdc, centerx - 461 / 2, centery - 573 / 2 + 170 + 52 * i, 461, 43, memdc, 0, 0, 461, 43, RGB(0, 0, 255));
					}
				}

			}

			//2506105
			if (game_end_flag) {

				//여기다가엔딩
				SelectObject(memdc, endscreen);
				TransparentBlt(mdc, centerx - 461 / 2, centery - 573 / 2, 461, 573, memdc, 0, 0, 461, 573, RGB(0, 0, 255));
				SetBkMode(mdc, TRANSPARENT);

				int score = 100'000 + 1'000 * monster_cnt - 5'000 * dead_cnt - (min * 60 + sec);

				wsprintf(txt, TEXT("%d분 %d초"), min, sec);
				TextOut(mdc, centerx + 60, centery - 110, txt, lstrlen(txt));
				wsprintf(txt, TEXT("%d마리"), monster_cnt);
				TextOut(mdc, centerx + 60 + 5, centery - 110 + 35, txt, lstrlen(txt));
				wsprintf(txt, TEXT("%d회"), dead_cnt);
				TextOut(mdc, centerx + 60 + 10, centery - 110 + 73, txt, lstrlen(txt));
				wsprintf(txt, TEXT("%d점"), score);
				TextOut(mdc, centerx + 50, centery + 52, txt, lstrlen(txt));
			}

			SelectObject(memdc, pclick[2]);
			TransparentBlt(mdc, clientRect.right - 150, clientRect.bottom - 73, 150, 73, memdc, 0, 0, 150, 73, RGB(0, 0, 255));

			if (p.died_flag) {
				SelectObject(memdc, player_died);
				TransparentBlt(mdc, centerx - 599 / 2, centery - 249 / 2, 599, 249, memdc, 0, 0, 599, 249, RGB(0, 0, 255));
			}
		}

		BitBlt(hdc, 0, 0, clientRect.right, clientRect.bottom, mdc, 0, 0, SRCCOPY);

		DeleteDC(memdc);
		DeleteDC(memdc2);
		DeleteDC(mdc);
		DeleteObject(hbitmap);

		EndPaint(hWnd, &ps);
		break;
	}
	case WM_DESTROY:
		CleanupInvBitmaps();
		CleanupItemBitmaps();
		CleanupPlayerSprite();
		CleanupBossSprite();
		DeleteDC(ArrowDC);
		DeleteObject(arrowBmp);
		
		PostQuitMessage(0);
		return 0;
	}
	return (DefWindowProc(hWnd, iMessage, wParam, lParam));
}
